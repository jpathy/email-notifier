name: aws lambda build & deploy

on:
  push:
    paths:
      - '.github/workflows/lambda_deploy.yml'
      - 'aws/**/*.go'
    tags:
      - 'v[0-9]*'
    branches:
      - '**'
  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      L_SUBMGR: ${{ secrets.SUBMGR_ARN }}
      L_INTERIM: ${{ secrets.INTERIM_ARN }}
      L_RETRIER: ${{ secrets.RETRIER_ARN }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: '1.21'
    - name: Go build
      run: |
        [[ -n "$L_SUBMGR" ]] && [[ -n "$L_INTERIM" ]] && [[ -n "$L_RETRIER" ]] || { echo "Missing lambda ARNs in repository secrets"; exit 1; }
        echo "::group::download module dependencies"
        go mod download
        echo "::endgroup::"
        echo "::group::vet with shadow tool"
        go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest >/dev/null
        export PATH="$PATH:$(go env GOPATH)/bin"
        go vet ./...
        go vet -vettool=$(which shadow) ./...
        echo "::endgroup::"
        declare -A LAMBDAS=(["$L_SUBMGR"]="submgr/lambda" ["$L_INTERIM"]="interim-sub" ["$L_RETRIER"]="delivery-retrier")
        echo "::group::building.."
        for i in "${!LAMBDAS[@]}"; do
          go build --ldflags '-s -w' -o bootstrap "./${LAMBDAS[$i]}";
          zip "${i}.zip" bootstrap;
          rm -f bootstrap;
        done
        echo "::endgroup::"
      working-directory: ./aws
      env:
        GOARCH: 'arm64'
        GOOS: 'linux'
    - name: Configure AWS Credentials
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
    - name: Upload function code
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      run: |
        L=("$L_SUBMGR" "$L_INTERIM" "$L_RETRIER")
        echo "::group::Uploading code for lambdas"
        for f in "${L[@]}"; do
          aws lambda update-function-code --function-name "$f" --zip-file "fileb://${f}.zip" --architectures "arm64"
        done
        echo "::endgroup::"
      working-directory: ./aws
